Reminder for stupid people
Stuff inside <> indicates code when it would be otherwise ambiguous

- First create your local directory

- Then do git init

- You can't check out (switch) branches with nothing inside of them, so make something.

- <git config user.name "Chike Nwaenie" --global> if I created the repository, global means this file is stored on my computer BUT outside the repository I made it in. Idk why this matters

- <git config user.email "chikenwaenie@gmail.com" --global>

- git status tells us the status of the repo

- <git add (file)> adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit.

- I can do git commit -m "..." which captures a snapshot of the currently staged changes. *Begs the question of whether I can do multiple different commits with different commit messages and these are all different snapshots. Or whether it overrides each snapshot?*

- <git config core.editor notepad> sets my default editor to notepad for commits. So now when I want to commit it opens up notepad

- git branch (name) creates a new branch called (name)

- git checkout (name) allows me to switch to a that branch

- <git branch> by itself allows us to see what branches there are and that we're in

- A branch is a linear path of commits, say:
MASTER: commit1, commit2, commit3, commit4

Say, after commit3, I think to myself, "Okay, I want to try some wacky stuff. I'll make commit4 which is stable, reliable, whatever, but using commit3's code, I'm going to BRANCH off somewhere else."

- If I have created a local repo, and this does not exist on the internet, I need to do this:

<
git remote add origin https://github.com/chike00/appscript.git

git branch -M main ####BE CAREFUL, THIS SNEAKILY RENAMES MY CURRENT BRANCH. SKIP THIS STEP IF YOU LIKE THE NAME YOU ALREADY HAVE

git push -u origin main ####BE CAREFUL. THIS ASSUMES I HAVE A BRANCH CALLED MAIN, IF I HAVE A BRANCH CALLED MASTER, OR POO, USE THAT INSTEAD
>

- If I want to see what origin I have. E.g. what repository on the INTERNET my local repo is connected to, then I do <git remote>

- After I've staged and committed my changes to my local repo (git add, git commit), I push the REPO (not the file) to origin

- If I want to push an existing repository to the origin server, then I do <git push -u NAME_OF_ORIGIN_SERVER NAME_OF_LOCAL_BRANCH>
	- I encountered a problem where git already knew that my repo had an origin server, however, when I switched to a branch which didn't have an upstream, it failed.
	
In general, I should do my local stuff using Git Bash. Creating my own repos, branches if need be, etc. Then things like Create a pull request should be done online.

It's early days, but I think I'm understanding this nonsense. Part 1 done.

SUMMARY----------------

Because it's dangerous to conflate ideas, I'm going to refer to an origin server as a remote server

I can:
From git bash:
Create a local repo (git init), creating a new branch (git branch NAME_OF_NEW_BRANCH), rename it (git branch -m OLD_NAME NEW_NAME), switch to the new branch (get checkout NAME_OF_BRANCH), stage adds (git add NAME_OF_FILE), stage the committed adds (git commit -m "MESSAGE"), connect to my remote server online (git remote add NAME_OF_REMOTE_SERVER https://link_to_repo), push the repo to the remote for the first time (pushing upstream) (git push -u NAME_OF_REMOTE_SERVER NAME_OF_BRANCH_TO_PUSH), check what the name of remote is (git remote), push commits to the origin server provided I've established that upstream connection (git push), I can create pull requests (by going online - probably I should switch branches first, although I don't think it's necessary), merge pull requests (also online, probably switch the master (or whatever the main repo is called) and do it from there)

I have also learned certain mindsets to approach with. One being to probably open your files from the command shell instead of your file Explorer because you may not know what branch you're in and you might confuse yourself. Also to switch branches to the one you wish to request a merge from when you're creating your pull request. It's probably not necessary but at least you understand the direction and hierarchy you're pushing and pulling from. 

Amen
-----------

Not amen, I'm not done

If you want to pull files online, then you can do <git fetch REMOTE_SERVER> This fetches all the new stuff from your remote but it does not merge these changes into your local repo.

If you want to merge these things into your local repo, you do <git merge remotename> if you want to merge the remote server into your local repo. If you just want to merge a branch in, then you can do git merge branchname.

Here you see the power of fetching, because you fetched all this information but that doesn't merge it. So you get to choose the things you want to incorporate. Like you're picking at food.